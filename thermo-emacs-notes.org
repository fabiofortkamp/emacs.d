* Introduction

These are the configuration related to my note-taking workflow, mainly based on deft and markdown mode

First, do the initial setting for markdown mode.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/markdown-mode/")
(require 'markdown-mode)
(autoload 'markdown-mode "markdown-mode"
       "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.txt\\'" . markdown-mode))
#+END_SRC

Enable its math- mode:

#+BEGIN_SRC emacs-lisp
(markdown-enable-math)
#+END_SRC

* Modifying list continuation in Markdown mode

I would like to use automatic list continuation; i.e. when I press enter on a list, it creates a new list item. First we need a function to detect if we are inside a list; I use a function from the markdown mode that returns a list containing some parameters (such as marker used, indentation etc), and /returns nil if point is not inside a list/.

#+BEGIN_SRC emacs-lisp
(defun thermo-emacs-markdown-inside-list-p ()
      "Return t if point inside list item, nil if it is not."
     (if (markdown-cur-list-item-bounds) t nil))
#+END_SRC

Now we are ready to define this general "enter" function:

#+BEGIN_SRC emacs-lisp
(defun thermo-emacs-markdown-enter-key ()
      "If point is inside markdown list, insert new list item, otherwise handle RET according to value of markdown-indent-on-enter"
      (interactive)
      (if (thermo-emacs-markdown-inside-list-p)
          (markdown-insert-list-item 1)
        (if markdown-indent-on-enter (newline-and-indent) (newline))
    ))
#+END_SRC    

Finally, we bind "RET" to this function.

#+BEGIN_SRC emacs-lisp
  (add-hook 'markdown-mode-hook
                 (lambda ()
                   (define-key markdown-mode-map (kbd "<return>")
                               'thermo-emacs-markdown-enter-key)))



#+END_SRC

* Configure deft mode

Now, configure deft mode. I use the "extended version", which enables multiple file extensions and modes. I use markdown as default.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/deft/")
(require 'deft)

(setq deft-extensions '("txt" "org" "taskpaper" "md"))
(setq deft-default-extension "md")
(setq deft-directory "~/Dropbox/notes")
(setq deft-text-mode 'markdown-mode)

(setq deft-use-filename-as-title t)
#+END_SRC

This is a function that concatenates three deft functions. When executed, it will present the Deft buffer, clear the filter string, and query us what we want to search.

#+BEGIN_SRC emacs-lisp
  (defun thermo-emacs-deft-search ()
    "Open the deft buffer, clear the seach string and prompt for a new search string in minibuffer"
    (interactive)
    (deft)
    (deft-filter-clear)
    (call-interactively 'deft-filter)
)
#+END_SRC

We now set a global keywork to this function. This is my preferred behaviour; when I invoke Deft, I want to search for new files, and not retain the filtered list.

#+BEGIN_SRC emacs-lisp
(global-set-key [f8] 'thermo-emacs-deft-search)
#+END_SRC
