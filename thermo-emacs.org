* Introduction

This is Thermo Emacs, an Emacs configuration created by a researcher in Thermodynamics and Thermal Science, hence the name. I really love Thermodynamics and I seem to be branding my code projects around this name, but this really represents an Emacs configuration for a doctorate student, someone who:

- write LaTeX files
- write lots of notes in Markdown format, emulating the [[http://brettterpstra.com/projects/nvalt/][nvAlt]] application (on OS X)
- write Python scripts, both for system scripting and numerical calculations
  
* Configuration

** Initial settings

This is my previous configuration, that I have to organized in an literate programming approach.

Remember that in our init file we defined a variable ~dotfiles-dir~ that contains the path to the ~.emacs.d~ directory.

The first thing is to define and load a file containing all configurations done in the /Customize/ system.


#+BEGIN_SRC emacs-lisp
;specifify the custom file
(setq custom-file (expand-file-name "emacs-custom.el" dotfiles-dir))
(load custom-file)
#+END_SRC

Next, we define a directory ~lisp~ in our directory that contaings single file packages, and load it.
#+BEGIN_SRC emacs-lisp
; add init directory to load path
(add-to-list 'load-path (expand-file-name "lisp" dotfiles-dir))
#+END_SRC

We specifiy ~utf-8~ everywhere for our encoding.

#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(setq coding-system-for-read 'utf-8)
(setq coding-system-for-write 'utf-8)
#+END_SRC

** UI settings

Disable the useless toolbar.

#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC

Enable line numbering
#+BEGIN_SRC emacs-lisp
(global-linum-mode 1)
#+END_SRC

I also like visual-line mode. In this way, when a line is too long, Emacs breaks it into two /visual/ lines. In the actual file, there is only one long file, but line commands work on these visual units

#+BEGIN_SRC emacs-lisp
(global-visual-line-mode 1)
#+END_SRC

Load my favorite theme

#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path (expand-file-name  "emacs-color-theme-solarized" dotfiles-dir))
  (load-theme 'solarized t)

#+END_SRC

** Ido mode

Ido is a really nice mode, but I'm just scratching the surface. So here I just enable it.

What it does is enable fuzzy search and match when opening files.

#+BEGIN_SRC emacs-lisp
(ido-mode 1)
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
#+END_SRC

** Upcase region

I also enable the command to convert a region to uppercase.

#+BEGIN_SRC emacs-lisp
(put 'upcase-region 'disabled nil)
#+END_SRC

* Loading files

Load some basic global keybindings.

#+BEGIN_SRC emacs-lisp
(org-babel-load-file (expand-file-name "thermo-emacs-keybindings.org" dotfiles-dir))
#+END_SRC

Load the ELPA packages

#+BEGIN_SRC emacs-lisp
(setq package-enable-at-startup nil)
(package-initialize)
#+END_SRC

Load the configurations related to note-taking:

#+BEGIN_SRC emacs-lisp
(org-babel-load-file (expand-file-name "thermo-emacs-notes.org" dotfiles-dir))
#+END_SRC

Load my AUCTeX configurations:

#+BEGIN_SRC emacs-lisp
(org-babel-load-file (expand-file-name "thermo-emacs-latex.org" dotfiles-dir))
#+END_SRC

Load my org-mode configurations:

#+BEGIN_SRC emacs-lisp
(org-babel-load-file (expand-file-name "thermo-emacs-org.org" dotfiles-dir))
#+END_SRC

Load some OS-specific files:

#+BEGIN_SRC emacs-lisp
(if (eq system-type 'darwin)
(org-babel-load-file (expand-file-name "thermo-emacs-osx.org" dotfiles-dir))
)

(if (eq system-type 'windows-nt)
      (org-babel-load-file (expand-file-name "thermo-emacs-windows.org" dotfiles-dir))
)
#+END_SRC
